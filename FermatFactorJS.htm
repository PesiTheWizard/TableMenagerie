<html>
<head>
<title>Fermat factorizing with JS</title>
<script>
function initialGuess(x)//currently unused
{
	if(typeof(x)!=="bigint" || x<=(0n)){return null;}
	const c = x.toString(2).length;//this turned out to be faster than looping through the bits
	return (x>>BigInt(c>>1));
}
function NewtonRoot(x)
{
	if(typeof(x)!=="bigint" || x<=(0n)){return null;}
	let loopcheck = null;
	let lastguess = null;
	let guess = (x>>BigInt((x.toString(2).length)>>1));//doing the initial guess directly
	while(true)
	{
		if(guess===lastguess){return guess;}
		if(guess===loopcheck){return ((guess<lastguess)?guess:lastguess);}
		loopcheck = lastguess;
		lastguess = guess;
		guess = (guess+(x/guess))>>(1n);
	}
}
function UIEH(ClBt)
{
	ClBt.disabled = true;
	let O = null;
	let R = null;
	const inpN = document.getElementById("txtBigNumber").value.trim();
	const inpS = parseInt(document.getElementById("txtSteps").value.trim());
	const Dsvar = document.getElementById("svar");
	if(sanityChecker([inpS],inpN,["Steps"],Dsvar))
	{
		ClBt.disabled = false;
		return;
	}
	try
	{
		O = BigInt(inpN);
	}
	catch(e)
	{
		console.log(e);
		Dsvar.innerText = "Error. See console";
		ClBt.disabled = false;
		return;
	}
	Dsvar.innerText = "Number:\n".concat(O);
	if(O<=(0n))
	{
		Dsvar.appendChild(document.createTextNode("\nNo emptyness or negativity allowed."));
		ClBt.disabled = false;
		return;
	}
	R = NewtonRoot(O);
	Dsvar.appendChild(document.createTextNode("\nSquare root:\n".concat(R)));
	//adding the skip to R here
	const iSk = document.getElementById("txtSkips").value.trim();
	let SK;
	if(iSk.length > 0)
	{
		try
		{
			SK = BigInt(iSk);
			if(SK < (0n))
			{SK = 0n;}
		}
		catch(e)
		{
			console.log(e);
			Dsvar.appendChild(document.createTextNode("\n(Skip error)"));
			ClBt.disabled = false;
			return;
		}
	}
	else
	{
		SK = 0n;
	}
	Dsvar.appendChild(document.createTextNode("\nSkip:"+SK));
	R = R+SK;
	//done with the skip
	let D = R*R;
	if(D===O)
	{
		Dsvar.appendChild(document.createTextNode("\nIt\'s a square!"));
		ClBt.disabled = false;
		return;
	}
	if((O%(2n))===(0n))
	{
		Dsvar.appendChild(document.createTextNode("\nEven numbers won\'t work here."));
		ClBt.disabled = false;
		return;
	}
	D = D+(R<<(1n))+(1n)-O;//setting up running difference
	R = R+(1n);
	let B = NewtonRoot(D);
	if((B*B)===D)//found in first step
	{
		Dsvar.appendChild(document.createTextNode(`\n*First step finding*\nFactors are:\n${R-B}\nand\n${R+B}`));
		Dsvar.appendChild(document.createTextNode(`\nB:\n${B}`));
		ClBt.disabled = false;
		return;
	}
	let Sc = 1;
	while(Sc < inpS)//does one more step than indicated by this
	{
		D = D+(R<<(1n))+(1n);
		R = R+(1n);
		Sc++;
		B = NewtonRoot(D);
		if((B*B)===D)
		{
			Dsvar.appendChild(document.createTextNode(`\n*Step ${Sc} finding*\nFactors are:\n${R-B}\nand\n${R+B}`));
			Dsvar.appendChild(document.createTextNode(`\nB:\n${B}`));
			ClBt.disabled = false;
			return;
		}
	}
	Dsvar.appendChild(document.createTextNode(`\n-Factors not found in ${Sc} step(s)-\nR:\n${R}\nB:\n${B}`));
	ClBt.disabled = false;
}
function Fcheck()
{
	const inpA = document.getElementById("txtCA").value.trim();
	const inpB = document.getElementById("txtCB").value.trim();
	const Dsvar2 = document.getElementById("svar2");
	let BIA, BIB;
	try
	{
		BIA = BigInt(inpA);
		BIB = BigInt(inpB);
	}
	catch(e)
	{
		console.log(e);
		Dsvar2.innerText = "Error. See console";
		return;
	}//assumed BigInts after this point
	if(BIA<(0n) || BIB<(0n))
	{
		Dsvar2.innerText = "No negativity allowed";
		return;
	}
	if(BIA%(2n)===(0n) || BIB%(2n)===(0n))
	{
		Dsvar2.innerText = "Even numbers won\'t work here.";
		return;
	}
	const Mu = BIA*BIB;
	const pA = NewtonRoot(Mu);
	const pB = (BIA+BIB)>>(1n);
	Dsvar2.innerText = "Number A:\n".concat(BIA,"\nNumber B:\n",BIB,"\nProduct:\n",Mu,"\nFermat step:\n",(pB-pA));
}
function MultMethod(ClBt)
{
	ClBt.disabled = true;
	const MinpN = document.getElementById("txtMN").value.trim();
	const MSPS = parseInt(document.getElementById("txtMSPS").value.trim());
	const MS = parseInt(document.getElementById("txtMS").value.trim());
	const Dsvar3 = document.getElementById("svar3");
	if(sanityChecker([MSPS,MS],MinpN,["Steps","Stops"],Dsvar3))
	{
		ClBt.disabled = false;
		return;
	}
	let MMN = null;
	try
	{
		MMN = BigInt(MinpN);
	}
	catch(e)
	{
		console.log(e);
		Dsvar3.innerText = "Error. See console";
		ClBt.disabled = false;
		return;
	}
	Dsvar3.innerText = "Number:\n".concat(MMN);
	if(MMN<=(0n))
	{
		Dsvar3.appendChild(document.createTextNode("\nNo emptyness or negativity allowed"));
		ClBt.disabled = false;
		return;
	}
	if((MMN%(2n))===(0n))
	{
		Dsvar3.appendChild(document.createTextNode("\nEven numbers won\'t work here."));
		ClBt.disabled = false;
		return;
	}
	Dsvar3.appendChild(document.createTextNode("\nSteps:"+MSPS));
	Dsvar3.appendChild(document.createTextNode("\nStops:"+MS+"\n"));
	const addedEachStep = MMN << (1n);
	let multDisplay = -1;
	MMN-=addedEachStep;//so that first step will start off right
	for(let i=0;i<MS;i++)
	{
		multDisplay+=2;//In first iteration, this becomes 1
		MMN+=addedEachStep;//In first iteration, this becomes the original
		//check for initial square
		let R = NewtonRoot(MMN);
		const D = R*R;
		if(D==MMN)
		{
			Dsvar3.appendChild(document.createTextNode(`\nMultiplier:${multDisplay}\nIt's a square!\nRoot:${R}\n(i:${i})`));
			ClBt.disabled = false;
			return;
		}
		//since it wasn't equal, a minimum of 1 step is needed
		let RunningDifference = D-MMN;//starts off negative, becomes positive during first iteration of inner loop
		//D is not used after this point
		for(let j=0;j<MSPS;j++)
		{
			RunningDifference += (R<<(1n))+(1n);
			R = R+(1n);
			const diffRoot = NewtonRoot(RunningDifference);
			if(diffRoot*diffRoot == RunningDifference)
			{
				Dsvar3.appendChild(document.createTextNode(`--Answer found--\nMultiplier:${multDisplay}\nStep:${j+1}\nFactors are:\n${R+diffRoot}\nand\n${R-diffRoot}\nB:\n${diffRoot}`));
				ClBt.disabled = false;
				return;
			}
		}
	}
	Dsvar3.appendChild(document.createTextNode(`\n-Factors not found in ${MS} stop(s)-\nLast multiplier: ${multDisplay}`));
	ClBt.disabled = false;
}
function sanityChecker(A,S,E,D)//returns true if something wrong
{
	console.assert(Array.isArray(A) && A.length>0,"A must be non-empty number array");
	console.assert(Array.isArray(E) && E.length>=A.length,"E must be string-array as long as A");
	for(let i=0;i<A.length;i++)
	{
		if(isNaN(A[i]) || A[i]<=0)
		{
			D.innerText = `${E[i]} not a number or <= 0`;
			return true;
		}
	}
	if(S.length===0)
	{
		D.innerText = "Number field empty";
		return true;
	}
	return false;
}
</script>
<style>
input
{
	margin-top: 1px;
	margin-bottom: 1px;
}
</style>
</head>
<body>
<h3>Factoring</h3>
Big number = <input type=text size=110 id="txtBigNumber"><br>
Skips = <input type=text value="0" id="txtSkips"><br>
Steps = <input type=text value="100" id="txtSteps"><br>
<input type="button" value="Factorize" onclick=UIEH(this)><br>
<pre id="svar"></pre>
<hr>
<h3>Fermat check</h3>
Number A = <input type=text size=110 id="txtCA"><br>
Number B = <input type=text size=110 id="txtCB"><br>
<input type="button" value="Fermat check" onclick=Fcheck()><br>
<pre id="svar2"></pre>
<hr>
<h3>Multiplier method</h3>
Number = <input type=text size=110 id="txtMN"><br>
Steps per stop = <input type=text value="20" id="txtMSPS"><br>
stops = <input type=text value="129" id="txtMS"><br>
<input type=button value="check" onclick=MultMethod(this)><br>
<pre id="svar3"></pre>
</body>
</html>