<html>
<head>
<title>Online bots - Lichess API
</title>
<script>
function initialGet(clbt)
{
	clbt.disabled = true;
	const t = document.getElementById("NofBotsToGet").value;
	const tv = parseInt(t);
	if(tv>=1)
	{
		const OGresp = document.getElementById("stts");
		const HL = document.getElementById("hdrs");
		const svr = document.getElementById("svar");
		const gt = document.getElementById("st");
		document.getElementById("er").innerHTML = "";
		OGresp.innerHTML = "Fetching data of "+tv+" bot(s)";
		HL.innerHTML = "";
		svr.innerHTML = "Waiting for response...";
		fetchHandler(tv,OGresp,HL,svr,gt);
	}
	else
	{
		document.getElementById("er").innerHTML = tv+" is not at least 1";
		clbt.disabled = false;
	}
}
async function fetchHandler(getThisManyBots,statusHolder,headerHolder,netLogger,t)
{
	const response = await fetch("https://lichess.org/api/bot/online?nb=" + getThisManyBots);
	statusHolder.innerHTML = "Response code = "+response.status;
	for(let [k,v] of response.headers){lister(`${k} : ${v}`,headerHolder,'li');}
	const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();
	let ChCt = 0;
	let brokenLines = 0;
	netLogger.innerHTML = "Reading response...";
	while(true)
	{
		const {value,done} = await reader.read();//typeof(value) is string
		if(done){break;}
		brokenLines += textToJSONhandler(value.trim(),t);
		ChCt++;
	}
	if(brokenLines===0)
	{
		netLogger.innerHTML = "Response fully received in "+ChCt+" chunks";
	}
	else
	{
		netLogger.innerHTML = "Response received in "+ChCt+" chunks with "+brokenLines+" broken line(s)";
	}
}
function lister(listedText, PN, ElType)
{
	const listEntry = document.createElement(ElType);
	const entryText = document.createTextNode(listedText);
	listEntry.appendChild(entryText);
	PN.appendChild(listEntry);
}
function textToJSONhandler(stuff,t)
{
	const conveyorBelt = stuff.split("\n");
	let erc = 0;
	let jp;
	for(let i=0;i<conveyorBelt.length;i++)
	{
		try
		{
			jp = JSON.parse(conveyorBelt[i].trim());
		}
		catch(e)
		{
			console.log("Could not parse following line:\n"+conveyorBelt[i]);
			erc++;
			continue;
		}
		makeTableEntry(jp,t);
	}
	return erc;
}
function makeTableEntry(JO,tableElem)
{
	const tablRw = document.createElement('tr');
	lister(JO["id"]??"",tablRw,'td');
	lister(JO["username"]??"",tablRw,'td');
	lister(Object.keys(JO["perfs"]).length,tablRw,'td');
	lister(JO["createdAt"],tablRw,'td');
	lister(new Date(JO["createdAt"]).toLocaleString(),tablRw,'td');
	lister(JO["seenAt"],tablRw,'td');
	lister(new Date(JO["seenAt"]).toLocaleString(),tablRw,'td');
	lister(JO["playTime"]?JO["playTime"]["total"]:"",tablRw,'td');
	lister(JO["playTime"]?JO["playTime"]["tv"]:"",tablRw,'td');
	lister(JO["profile"]?"yes":"no",tablRw,'td');
	lister(JO["title"]??"",tablRw,'td');
	lister(JO["patron"]??"",tablRw,'td');
	lister(JO["verified"]??"",tablRw,'td');
	lister(JO["tosViolation"]??"",tablRw,'td');
	tableElem.appendChild(tablRw);
}
function a(ctsb, lth)
{//ctsb - column to sort by, lth - low to high
	const gt = document.getElementById("st").childNodes;
	const tl = gt.length - 2;//total length, stop if cup goes above this
	let cup = 0;
	let fn, sn, s1, s2;//firstnode, secondnode; the nodes are tr-s
	while(cup <= tl)//gnomesorting the rows
	{
		fn = gt[cup];
		sn = gt[cup+1];
		s1 = fn.childNodes[ctsb].textContent;
		s2 = sn.childNodes[ctsb].textContent;
		if(s1 == s2)
		{
			cup++;
		}
		else if((s1 > s2) == lth)
		{
			fn.before(sn);//swap rows
			cup--;
			if(cup<0){cup=1;}
		}
		else
		{
			cup++;
		}
	}
}
</script>
<style>
td, th
{
	white-space: nowrap;
}
span
{
	cursor: pointer;
}
</style>
</head>
<body>
<input type=text id="NofBotsToGet" value="180"> <input type=button value="Get this many bots" onClick=initialGet(this)>
<pre id="er"></pre>
<hr>
<div id="stts"></div>
<ul id="hdrs"></ul>
<div id="svar"></div>
<table border=1>
<thead><tr>
<th><span onClick=a(0,true)>&#9650;</span> id <span onClick=a(0,false)>&#9660;</span></th>
<th><span onClick=a(1,true)>&#9650;</span> username <span onClick=a(1,false)>&#9660;</span></th>
<th><span onClick=a(2,true)>&#9650;</span> #perfs <span onClick=a(2,false)>&#9660;</span></th>
<th><span onClick=a(3,true)>&#9650;</span> createdAt(Timestamp) <span onClick=a(3,false)>&#9660;</span></th>
<th><span onClick=a(4,true)>&#9650;</span> createdAt(Date) <span onClick=a(4,false)>&#9660;</span></th>
<th><span onClick=a(5,true)>&#9650;</span> seenAt(Timestamp) <span onClick=a(5,false)>&#9660;</span></th>
<th><span onClick=a(6,true)>&#9650;</span> seenAt(Date) <span onClick=a(6,false)>&#9660;</span></th>
<th><span onClick=a(7,true)>&#9650;</span> playTime/total <span onClick=a(7,false)>&#9660;</span></th>
<th><span onClick=a(8,true)>&#9650;</span> playTime/tv <span onClick=a(8,false)>&#9660;</span></th>
<th>profile?</th>
<th>title</th>
<th>patron</th>
<th>verified</th>
<th>tosViolation</th>
</tr></thead>
<tbody id="st"></tbody>
</table>
</body>
</html>
