<html>
<head>
<title>Online bots - Lichess API</title>
<script>
function initialGet(clbt)
{
	clbt.disabled = true;
	const DlogA = document.getElementById("logA");
	const t = document.getElementById("NofBotsToGet").value.trim();
	const Tsite = document.getElementById("selSite").value;
	const tv = parseInt(t);
	if(tv>=1)
	{
		const OGresp = document.getElementById("stts");
		const HL = document.getElementById("hdrs");
		const svr = document.getElementById("svar");
		const gt = document.getElementById("st");
		const fEP = `https://${Tsite}.org/api/bot/online?nb=${tv}`;
		DlogA.innerText = `Fetching data of ${tv} ${Tsite} bot${tv===1?"":"s"}`;
		OGresp.innerText = "Preparing...";
		HL.innerHTML = "";
		svr.innerText = "Waiting for response...";
		fetchHandler(fEP,OGresp,HL,svr,gt,DlogA);
	}
	else
	{
		DlogA.innerText = `${tv} is not at least 1`;
		clbt.disabled = false;
	}
}
async function fetchHandler(EndPointAPI,statusHolder,headerHolder,netLogger,t,LogA)
{
	statusHolder.innerText = "Making request...";
	const TS1 = Date.now();
	const response = await fetch(EndPointAPI);
	statusHolder.innerText = "Response code = ".concat(response.status);
	for(let [k,v] of response.headers){lister(`${k} : ${v}`,headerHolder,'li');}
	const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();
	const TS2 = Date.now();
	let ChCt = 0;
	const reps = ["",0,0,0,0,0];
	netLogger.innerText = "Reading response...";
	while(true)
	{
		const {value,done} = await reader.read();//typeof(value) is string
		if(done){break;}
		textToJSONhandler(value.trim(),t,reps);
		ChCt++;
	}
	LogA.innerText = "Fetched ".concat(EndPointAPI," in ",(TS2-TS1)/1000," sec.");
	const brokenLines = reps[1];
	if(brokenLines===0)
	{
		netLogger.innerText = `Response fully received in ${ChCt} chunk${ChCt==1?"":"s"}. (${reps[5]} line${reps[5]==1?"":"s"} parsed)`;
	}
	else
	{
		netLogger.innerText = `Response received in ${ChCt} chunk${ChCt==1?"":"s"} with ${brokenLines} broken line${brokenLines==1?"":"s"}; ${reps[2]} of which salvaged into ${reps[3]} whole one${reps[3]==1?"":"s"}, ${reps[4]} discarded. (${reps[5]} line${reps[5]==1?"":"s"} parsed)`;
	}
	if(reps[4]!=0)
	{
		console.log("Discarded string-pile:\n".concat(reps[0]));
	}
}
function lister(listedText, PN, ElType)
{
	const listEntry = document.createElement(ElType);
	const entryText = document.createTextNode(listedText);
	listEntry.appendChild(entryText);
	PN.appendChild(listEntry);
}
function textToJSONhandler(stuff,t,als)
{
	const conveyorBelt = stuff.split("\n");
	let jp;
	let fs = false;
	for(let i=0;i<conveyorBelt.length;i++)
	{
		fs = false;
		try
		{
			jp = JSON.parse(conveyorBelt[i].trim());
		}
		catch(e)
		{
			als[1]++;
			als[0] = als[0].concat(conveyorBelt[i]);
			als[4]++;
			fs = true;
		}
		if(fs)
		{
			try
			{
				jp = JSON.parse(als[0].trim());
			}
			catch(e)
			{
				continue;
			}
			//secondary parse didn't error out, so we're back on track
			als[0] = "";
			als[2]+=als[4];//running total of how many broken lines were salvaged
			als[3]++;//how many whole lines were made from the broken parts
			als[4]=0;
		}
		makeTableEntry(jp,t);
		als[5]++;//parsed lines counter
	}
}
function makeTableEntry(JO,tableElem)
{
	const NA = "N/A";
	const tablRw = document.createElement('tr');
	lister(JO["id"]??"",tablRw,'td');
	lister(JO["username"]??"",tablRw,'td');
	lister(JO["perfs"]?(Object.keys(JO["perfs"]).length):NA,tablRw,'td');
	lister(JO["createdAt"]??"",tablRw,'td');
	lister(JO["createdAt"]?(new Date(JO["createdAt"]).toLocaleString()):"",tablRw,'td');
	lister(JO["seenAt"]??"",tablRw,'td');
	lister(JO["seenAt"]?(new Date(JO["seenAt"]).toLocaleString()):"",tablRw,'td');
	lister(JO["playTime"]?(JO["playTime"]["total"]??""):NA,tablRw,'td');
	lister(JO["playTime"]?(JO["playTime"]["tv"]??""):NA,tablRw,'td');
	lister(JO["profile"]?(Object.keys(JO["profile"]).length):NA,tablRw,'td');
	lister(JO["title"]??"",tablRw,'td');
	lister(JO["patron"]??"",tablRw,'td');
	tableElem.appendChild(tablRw);
}
function a(ctsb, lth)
{//ctsb - column to sort by, lth - low to high
	const gt = document.getElementById("st").childNodes;
	const tl = gt.length - 2;//total length, stop if cup goes above this
	let cup = 0;
	let fn, sn, s1, s2;//firstnode, secondnode; the nodes are tr-s
	while(cup <= tl)//gnomesorting the rows
	{
		fn = gt[cup];
		sn = gt[cup+1];
		s1 = fn.childNodes[ctsb].textContent;
		s2 = sn.childNodes[ctsb].textContent;
		if(s1 == s2)
		{
			cup++;
		}
		else if((s1 > s2) == lth)
		{
			fn.before(sn);//swap rows
			cup--;
			if(cup<0){cup=1;}
		}
		else
		{
			cup++;
		}
	}
}
</script>
<style>
td, th
{
	white-space: nowrap;
}
span
{
	cursor: pointer;
}
select
{
	margin-bottom: 1px;
}
</style>
</head>
<body>
Site = <select id="selSite">
<option value="lichess" selected>lichess</option>
<option value="lishogi">lishogi</option>
</select><br>
<input type=text id="NofBotsToGet" value="200"> <input type=button value="Get this many bots" onClick=initialGet(this)>
<div id="logA">Log space</div>
<hr>
<div id="stts"></div>
<ul id="hdrs"></ul>
<div id="svar"></div>
<table border=1>
<thead><tr>
<th colspan=3></th><th colspan=2>createdAt</th><th colspan=2>seenAt</th><th colspan=2>playTime</th>
</tr><tr>
<th>id</th>
<th>username</th>
<th>#perfs</th>
<th>(Timestamp)</th>
<th>(Date)</th>
<th>(Timestamp)</th>
<th>(Date)</th>
<th>total</th>
<th>tv</th>
<th>#profile</th>
<th>title</th>
<th>patron</th>
</tr><tr>
<th><span onClick=a(0,true)>&#9650;</span> <span onClick=a(0,false)>&#9660;</span></th>
<th><span onClick=a(1,true)>&#9650;</span> <span onClick=a(1,false)>&#9660;</span></th>
<th><span onClick=a(2,true)>&#9650;</span> <span onClick=a(2,false)>&#9660;</span></th>
<th><span onClick=a(3,true)>&#9650;</span> <span onClick=a(3,false)>&#9660;</span></th>
<th><span onClick=a(4,true)>&#9650;</span> <span onClick=a(4,false)>&#9660;</span></th>
<th><span onClick=a(5,true)>&#9650;</span> <span onClick=a(5,false)>&#9660;</span></th>
<th><span onClick=a(6,true)>&#9650;</span> <span onClick=a(6,false)>&#9660;</span></th>
<th><span onClick=a(7,true)>&#9650;</span> <span onClick=a(7,false)>&#9660;</span></th>
<th><span onClick=a(8,true)>&#9650;</span> <span onClick=a(8,false)>&#9660;</span></th>
<th><span onClick=a(9,true)>&#9650;</span> <span onClick=a(9,false)>&#9660;</span></th>
<th></th>
<th><span onClick=a(11,true)>&#9650;</span> <span onClick=a(11,false)>&#9660;</span></th>
</tr></thead>
<tbody id="st"></tbody>
</table>
</body>
</html>
