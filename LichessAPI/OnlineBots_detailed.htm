<html>
<head>
<title>Online bots, detailed - Lichess API
</title>
<script>
function initialGet(clbt)
{
	clbt.disabled = true;
	const t = document.getElementById("NofBotsToGet").value;
	const tv = parseInt(t);
	if(tv>=1)
	{
		const OGresp = document.getElementById("stts");
		const HL = document.getElementById("hdrs");
		const svr = document.getElementById("svar");
		const gt = document.getElementById("st");//the tbody into which the processed response goes; called t henceforth
		document.getElementById("er").innerText = "";
		OGresp.innerText = `Fetching data of ${tv} bot${tv===1?"":"s"}`;
		HL.innerHTML = "";
		svr.innerText = "Waiting for response...";
		fetchHandler("https://lichess.org/api/bot/online?nb=".concat(tv),OGresp,HL,svr,gt);
	}
	else
	{
		document.getElementById("er").innerText = `${tv} is not at least 1`;
		clbt.disabled = false;
	}
}
async function fetchHandler(endPointString,statusHolder,headerHolder,netLogger,t)
{
	const response = await fetch(endPointString);
	statusHolder.innerText = "Response code = ".concat(response.status);
	for(let [k,v] of response.headers){lister(`${k} : ${v}`,headerHolder,'li');}
	const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();
	let ChCt = 0;//chunk-count
	const reps = ["",0,0,0,0,0];//pile of unparsables and statistics reports
	netLogger.innerText = "Reading response...";
	while(true)
	{
		const {value,done} = await reader.read();//typeof(value) is string
		if(done){break;}

		textToJSONhandler(value.trim(),t,reps);
		ChCt++;
	}
	const brokenLines = reps[1];
	if(brokenLines===0)
	{
		netLogger.innerText = `Response fully received in ${ChCt} chunk${ChCt==1?"":"s"}. (${reps[5]} lines parsed)`;
	}
	else
	{
		netLogger.innerText = `Response received in ${ChCt} chunk${ChCt==1?"":"s"} with ${brokenLines} broken line${brokenLines==1?"":"s"}; ${reps[2]} of which salvaged into ${reps[3]} whole one${reps[3]==1?"":"s"}, ${reps[4]} discarded. (${reps[5]} lines parsed)`;
	}
	if(reps[4]!=0)
	{
		console.log("Discarded string-pile:\n".concat(reps[0]));
	}
}
function lister(listedText, PN, ElType)
{
	const listEntry = document.createElement(ElType);
	const entryText = document.createTextNode(listedText);
	listEntry.appendChild(entryText);
	PN.appendChild(listEntry);
}
function textToJSONhandler(stuff,t,als)
{
	const conveyorBelt = stuff.split("\n");
	let jp;
	let fs = false;//failstep
	for(let i=0;i<conveyorBelt.length;i++)
	{
		fs = false;
		try
		{
			jp = JSON.parse(conveyorBelt[i].trim());
		}
		catch(e)
		{
			als[1]++;//broken lines counter
			als[0] = als[0].concat(conveyorBelt[i]);//the pile of broken lines
			als[4]++;//number of lines currently making up the pile
			fs = true;
		}
		if(fs)
		{//we're here because the single-line parse job failed
			try
			{
				jp = JSON.parse(als[0].trim());
			}
			catch(e)
			{
				continue;
			}
			//secondary parse didn't error out, so we're back on track
			als[0] = "";
			als[2]+=als[4];//running total of how many broken lines were salvaged
			als[3]++;//how many whole lines were made from the broken parts
			als[4]=0;
		}
		makeTableEntry(jp,t);
		als[5]++;//parsed lines counter
	}
}
function makeTableEntry(JO,tableElem)
{
	const tablRw = document.createElement('tr');
	lister(JO["id"]??"",tablRw,'td');
	lister(JO["username"]??"",tablRw,'td');
	lister(JO["perfs"]?(Object.keys(JO["perfs"]).length):"N/A",tablRw,'td');
	lister(JO["perfs"]?.["bullet"]?.["games"]??"",tablRw,'td');
	lister(JO["perfs"]?.["bullet"]?.["rating"]??"",tablRw,'td');
	lister(JO["perfs"]?.["blitz"]?.["games"]??"",tablRw,'td');
	lister(JO["perfs"]?.["blitz"]?.["rating"]??"",tablRw,'td');
	lister(JO["perfs"]?.["rapid"]?.["games"]??"",tablRw,'td');
	lister(JO["perfs"]?.["rapid"]?.["rating"]??"",tablRw,'td');
	lister(JO["perfs"]?.["classical"]?.["games"]??"",tablRw,'td');
	lister(JO["perfs"]?.["classical"]?.["rating"]??"",tablRw,'td');
	lister(JO["perfs"]?.["correspondence"]?.["games"]??"",tablRw,'td');
	lister(JO["perfs"]?.["correspondence"]?.["rating"]??"",tablRw,'td');
	lister(JO["perfs"]?(JO["perfs"]["chess960"]?"yes":"no"):"N/A",tablRw,'td');
	lister(JO["perfs"]?(JO["perfs"]["crazyhouse"]?"yes":"no"):"N/A",tablRw,'td');
	lister(JO["perfs"]?(JO["perfs"]["antichess"]?"yes":"no"):"N/A",tablRw,'td');
	lister(JO["perfs"]?(JO["perfs"]["atomic"]?"yes":"no"):"N/A",tablRw,'td');
	lister(JO["perfs"]?(JO["perfs"]["horde"]?"yes":"no"):"N/A",tablRw,'td');
	lister(JO["perfs"]?(JO["perfs"]["kingOfTheHill"]?"yes":"no"):"N/A",tablRw,'td');
	lister(JO["perfs"]?(JO["perfs"]["racingKings"]?"yes":"no"):"N/A",tablRw,'td');
	lister(JO["perfs"]?(JO["perfs"]["threeCheck"]?"yes":"no"):"N/A",tablRw,'td');
	lister(JO["perfs"]?(JO["perfs"]["puzzle"]?"yes":"no"):"N/A",tablRw,'td');
	lister(JO["createdAt"]??"",tablRw,'td');
	lister(JO["createdAt"]?(new Date(JO["createdAt"]).toLocaleString()):"",tablRw,'td');
	lister(JO["seenAt"]??"",tablRw,'td');
	lister(JO["seenAt"]?(new Date(JO["seenAt"]).toLocaleString()):"",tablRw,'td');
	lister(JO["playTime"]?(JO["playTime"]["total"]??""):"N/A",tablRw,'td');
	lister(JO["playTime"]?(JO["playTime"]["tv"]??""):"N/A",tablRw,'td');
	lister(JO["profile"]?(Object.keys(JO["profile"]).length):"N/A",tablRw,'td');
	lister(JO["title"]??"",tablRw,'td');
	lister(JO["flair"]?"yes":"no",tablRw,'td');
	lister(JO["patron"]??"",tablRw,'td');
	lister(JO["verified"]??"",tablRw,'td');
	lister(JO["tosViolation"]??"",tablRw,'td');
	tableElem.appendChild(tablRw);
}
function a(ctsb, lth)
{//ctsb - column to sort by, lth - low to high
	const gt = document.getElementById("st").childNodes;
	const tl = gt.length - 2;//total length, stop if cup goes above this
	let cup = 0;
	let fn, sn, s1, s2;//firstnode, secondnode; the nodes are tr-s
	while(cup <= tl)//gnomesorting the rows
	{
		fn = gt[cup];
		sn = gt[cup+1];
		s1 = fn.childNodes[ctsb].textContent;
		s2 = sn.childNodes[ctsb].textContent;
		if(s1 == s2)
		{
			cup++;
		}
		else if((s1 > s2) == lth)
		{
			fn.before(sn);//swap rows
			cup--;
			if(cup<0){cup=1;}
		}
		else
		{
			cup++;
		}
	}
}
</script>
<style>
td, th
{
	white-space: nowrap;
}
span
{
	cursor: pointer;
}
</style>
</head>
<body>
<input type=text id="NofBotsToGet" value="180"> <input type=button value="Get this many bots" onClick=initialGet(this)>
<pre id="er"></pre>
<hr>
<div id="stts"></div>
<ul id="hdrs"></ul>
<div id="svar"></div>
<table border=1>
<thead>
<tr><th colspan=3></th><th colspan=2>Bullet</th><th colspan=2>Blitz</th><th colspan=2>Rapid</th><th colspan=2>Classical</th><th colspan=2>Correspondence</th><th colspan=9>Variants?</th><th colspan=2>createdAt</th><th colspan=2>seenAt</th><th colspan=2>playTime</th></tr>
<tr><th>id</th><th>username</th><th>#perfs</th>
<th>games</th><th>rating</th>
<th>games</th><th>rating</th>
<th>games</th><th>rating</th>
<th>games</th><th>rating</th>
<th>games</th><th>rating</th>
<th>chess960</th><th>crazyhouse</th><th>antichess</th><th>atomic</th><th>horde</th><th>kingOfTheHill</th><th>racingKings</th><th>threeCheck</th><th>puzzle</th>
<th>(Timestamp)</th><th>(Date)</th>
<th>(Timestamp)</th><th>(Date)</th>
<th>total</th><th>tv</th>
<th>#profile</th><th>title</th><th>flair?</th><th>patron</th><th>verified</th><th>tosViolation</th></tr>
<tr>
<th><span onClick=a(0,true)>&#9650;</span> <span onClick=a(0,false)>&#9660;</span></th>
<th><span onClick=a(1,true)>&#9650;</span> <span onClick=a(1,false)>&#9660;</span></th>
<th><span onClick=a(2,true)>&#9650;</span> <span onClick=a(2,false)>&#9660;</span></th>
<th><span onClick=a(3,true)>&#9650;</span> <span onClick=a(3,false)>&#9660;</span></th>
<th><span onClick=a(4,true)>&#9650;</span> <span onClick=a(4,false)>&#9660;</span></th>
<th><span onClick=a(5,true)>&#9650;</span> <span onClick=a(5,false)>&#9660;</span></th>
<th><span onClick=a(6,true)>&#9650;</span> <span onClick=a(6,false)>&#9660;</span></th>
<th><span onClick=a(7,true)>&#9650;</span> <span onClick=a(7,false)>&#9660;</span></th>
<th><span onClick=a(8,true)>&#9650;</span> <span onClick=a(8,false)>&#9660;</span></th>
<th><span onClick=a(9,true)>&#9650;</span> <span onClick=a(9,false)>&#9660;</span></th>
<th><span onClick=a(10,true)>&#9650;</span> <span onClick=a(10,false)>&#9660;</span></th>
<th><span onClick=a(11,true)>&#9650;</span> <span onClick=a(11,false)>&#9660;</span></th>
<th><span onClick=a(12,true)>&#9650;</span> <span onClick=a(12,false)>&#9660;</span></th>
<th><span onClick=a(13,true)>&#9650;</span> <span onClick=a(13,false)>&#9660;</span></th>
<th><span onClick=a(14,true)>&#9650;</span> <span onClick=a(14,false)>&#9660;</span></th>
<th><span onClick=a(15,true)>&#9650;</span> <span onClick=a(15,false)>&#9660;</span></th>
<th><span onClick=a(16,true)>&#9650;</span> <span onClick=a(16,false)>&#9660;</span></th>
<th><span onClick=a(17,true)>&#9650;</span> <span onClick=a(17,false)>&#9660;</span></th>
<th><span onClick=a(18,true)>&#9650;</span> <span onClick=a(18,false)>&#9660;</span></th>
<th><span onClick=a(19,true)>&#9650;</span> <span onClick=a(19,false)>&#9660;</span></th>
<th><span onClick=a(20,true)>&#9650;</span> <span onClick=a(20,false)>&#9660;</span></th>
<th><span onClick=a(21,true)>&#9650;</span> <span onClick=a(21,false)>&#9660;</span></th>
<th><span onClick=a(22,true)>&#9650;</span> <span onClick=a(22,false)>&#9660;</span></th>
<th><span onClick=a(23,true)>&#9650;</span> <span onClick=a(23,false)>&#9660;</span></th>
<th><span onClick=a(24,true)>&#9650;</span> <span onClick=a(24,false)>&#9660;</span></th>
<th><span onClick=a(25,true)>&#9650;</span> <span onClick=a(25,false)>&#9660;</span></th>
<th><span onClick=a(26,true)>&#9650;</span> <span onClick=a(26,false)>&#9660;</span></th>
<th><span onClick=a(27,true)>&#9650;</span> <span onClick=a(27,false)>&#9660;</span></th>
<th><span onClick=a(28,true)>&#9650;</span> <span onClick=a(28,false)>&#9660;</span></th>
<th></th>
<th><span onClick=a(30,true)>&#9650;</span> <span onClick=a(30,false)>&#9660;</span></th>
<th><span onClick=a(31,true)>&#9650;</span> <span onClick=a(31,false)>&#9660;</span></th>
<th><span onClick=a(32,true)>&#9650;</span> <span onClick=a(32,false)>&#9660;</span></th>
<th><span onClick=a(33,true)>&#9650;</span> <span onClick=a(33,false)>&#9660;</span></th>
</tr></thead>
<tbody id="st"></tbody>
</table>
</body>
</html>
