<html>
<head>
<title>Online bots, detailed - Lichess API</title>
<script>
function initialGet(clbt)
{
	"use strict";
	clbt.disabled = true;
	const DlogA = document.getElementById("logA");
	const t = document.getElementById("NofBotsToGet").value;
	const tv = parseInt(t);
	if(!(tv>=1))
	{
		DlogA.innerText = `${tv} is not at least 1`;
		clbt.disabled = false;
		return;
	}
	const SiteIndx = document.getElementById("selSite")?.selectedIndex??0;
	const colCount = [33,30][SiteIndx];
	const siteURLs = [
		`https://lichess.org/api/bot/online?nb=${tv}`,
		`https://lishogi.org/api/bot/online?nb=${tv}`
	][SiteIndx];
	const siteVariants = [
		["chess960","crazyhouse","antichess","atomic","horde","kingOfTheHill","racingKings","threeCheck","puzzle"],
		["ultraBullet","chushogi","minishogi","kyotoshogi","annanshogi","checkshogi"]
	][SiteIndx];
	const CR = document.getElementById("catRow");
	const NR = document.getElementById("nameRow");
	const SBR = document.getElementById("sortButtonRow");
	headerMaker("Variants?",siteVariants);
	const timestampCols = ["(Timestamp)","(Date)"];
	headerMaker("createdAt",timestampCols);
	headerMaker("seenAt",timestampCols);
	headerMaker("playTime",["total","tv"]);
	lister("#profile",NR,'th');
	lister("title",NR,'th');
	lister("flair?",NR,'th');
	lister("patron",NR,'th');
	lister("verified",NR,'th');
	sortbuttonCellFactory();
	const OGresp = document.getElementById("stts");
	const HL = document.getElementById("hdrs");
	const svr = document.getElementById("svar");
	const gt = document.getElementById("st");//the tbody into which the processed response goes; called t henceforth
	DlogA.innerText = `Fetching data of ${tv} bot${tv===1?"":"s"}`;
	OGresp.innerText = "Preparing...";
	HL.innerHTML = "";
	svr.innerText = "Waiting for response...";
	fetchHandler(siteURLs,OGresp,HL,svr,gt,DlogA,siteVariants);

	function headerMaker(U,D)
	{
		const banner = document.createElement('th');
		banner.appendChild(document.createTextNode(U));
		banner.setAttribute("colspan", D.length);
		CR.appendChild(banner);
		for(let i=0;i<D.length;i++)
		{
			lister(D[i],NR,'th');
		}
	}
	function sortbuttonCellFactory()
	{
		for(let i=0;i<colCount;i++)
		{
			const hCell = document.createElement('th');
			const S1 = document.createElement('span');
			const S2 = document.createElement('span');
			S1.innerHTML = "&#9650;";
			S2.innerHTML = "&#9660;";
			S1.setAttribute("onclick",`a(${i},true)`);
			S2.setAttribute("onclick",`a(${i},false)`);
			hCell.appendChild(S1);
			hCell.appendChild(document.createTextNode(" "));
			hCell.appendChild(S2);
			SBR.appendChild(hCell);
		}
	}
}
async function fetchHandler(endPointString,statusHolder,headerHolder,netLogger,t,LogA,vrntLst)
{
	statusHolder.innerText = "Making request...";
	const TS1 = Date.now();
	const response = await fetch(endPointString);
	statusHolder.innerText = "Response code = ".concat(response.status);
	for(let [k,v] of response.headers){lister(`${k} : ${v}`,headerHolder,'li');}
	const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();
	const TS2 = Date.now();
	let ChCt = 0;//chunk-count
	const reps = ["",0,0,0,0,0];//pile of unparsables and statistics reports
	netLogger.innerText = "Reading response...";
	while(true)
	{
		const {value,done} = await reader.read();//typeof(value) is string
		if(done){break;}
		textToJSONhandler(value.trim(),t,reps,vrntLst);
		ChCt++;
	}
	LogA.innerText = "Fetched ".concat(endPointString," in ",(TS2-TS1)/1000," sec.");
	const brokenLines = reps[1];
	if(brokenLines===0)
	{
		netLogger.innerText = `Response fully received in ${ChCt} chunk${ChCt==1?"":"s"}. (${reps[5]} line${reps[5]==1?"":"s"} parsed)`;
	}
	else
	{
		netLogger.innerText = `Response received in ${ChCt} chunk${ChCt==1?"":"s"} with ${brokenLines} broken line${brokenLines==1?"":"s"}; ${reps[2]} of which salvaged into ${reps[3]} whole one${reps[3]==1?"":"s"}, ${reps[4]} discarded. (${reps[5]} line${reps[5]==1?"":"s"} parsed)`;
	}
	if(reps[4]!=0)
	{
		console.log("Discarded string-pile:\n".concat(reps[0]));
	}
}
function lister(listedText, PN, ElType)
{
	const listEntry = document.createElement(ElType);
	const entryText = document.createTextNode(listedText);
	listEntry.appendChild(entryText);
	PN.appendChild(listEntry);
}
function textToJSONhandler(stuff,t,als,VL)
{
	const NA = "N/A";
	const conveyorBelt = stuff.split("\n");
	let jp;
	let fs = false;//failstep
	for(let i=0;i<conveyorBelt.length;i++)
	{
		fs = false;
		try
		{
			jp = JSON.parse(conveyorBelt[i].trim());
		}
		catch(e)
		{
			als[1]++;//broken lines counter
			als[0] = als[0].concat(conveyorBelt[i]);//the pile of broken lines
			als[4]++;//number of lines currently making up the pile
			fs = true;
		}
		if(fs)
		{//we're here because the single-line parse job failed
			try
			{
				jp = JSON.parse(als[0].trim());
			}
			catch(e)
			{
				continue;
			}
			//secondary parse didn't error out, so we're back on track
			als[0] = "";
			als[2]+=als[4];//running total of how many broken lines were salvaged
			als[3]++;//how many whole lines were made from the broken parts
			als[4]=0;
		}
		makeTableEntry(jp);
		als[5]++;//parsed lines counter
	}

	function makeTableEntry(JO)
	{
		const tablRw = document.createElement('tr');
		lister(JO["id"]??"",tablRw,'td');
		lister(JO["username"]??"",tablRw,'td');
		lister(JO["perfs"]?(Object.keys(JO["perfs"]).length):NA,tablRw,'td');
		lister(JO["perfs"]?.["bullet"]?.["games"]??"",tablRw,'td');
		lister(JO["perfs"]?.["bullet"]?.["rating"]??"",tablRw,'td');
		lister(JO["perfs"]?.["blitz"]?.["games"]??"",tablRw,'td');
		lister(JO["perfs"]?.["blitz"]?.["rating"]??"",tablRw,'td');
		lister(JO["perfs"]?.["rapid"]?.["games"]??"",tablRw,'td');
		lister(JO["perfs"]?.["rapid"]?.["rating"]??"",tablRw,'td');
		lister(JO["perfs"]?.["classical"]?.["games"]??"",tablRw,'td');
		lister(JO["perfs"]?.["classical"]?.["rating"]??"",tablRw,'td');
		lister(JO["perfs"]?.["correspondence"]?.["games"]??"",tablRw,'td');
		lister(JO["perfs"]?.["correspondence"]?.["rating"]??"",tablRw,'td');
		for(let i=0;i<VL.length;i++)
		{
			lister(JO["perfs"]?(JO["perfs"][VL[i]]?"yes":"no"):NA,tablRw,'td');
		}
		lister(JO["createdAt"]??"",tablRw,'td');
		lister(JO["createdAt"]?(new Date(JO["createdAt"]).toLocaleString()):"",tablRw,'td');
		lister(JO["seenAt"]??"",tablRw,'td');
		lister(JO["seenAt"]?(new Date(JO["seenAt"]).toLocaleString()):"",tablRw,'td');
		lister(JO["playTime"]?(JO["playTime"]["total"]??""):NA,tablRw,'td');
		lister(JO["playTime"]?(JO["playTime"]["tv"]??""):NA,tablRw,'td');
		lister(JO["profile"]?(Object.keys(JO["profile"]).length):NA,tablRw,'td');
		lister(JO["title"]??"",tablRw,'td');
		lister(JO["flair"]?"yes":"no",tablRw,'td');
		lister(JO["patron"]??"",tablRw,'td');
		lister(JO["verified"]??"",tablRw,'td');
		//lister(JO["tosViolation"]??"",tablRw,'td');//these have been excluded from the bot list
		t.appendChild(tablRw);//t is textToJSONhandler's 2nd parameter
	}
}
function a(ctsb, lth)
{//ctsb - column to sort by, lth - low to high
	const gt = document.getElementById("st").childNodes;
	const tl = gt.length;//total length, stop if cup reaches this
	let fn, sn, s1, s2;//firstnode, secondnode; the nodes are tr-s
	for(let cup=1;cup < tl;cup++)
/* This is insertionsort
cup starts at 1 because it compares index to index-1.
A list of 1 is already sorted and then this loop never runs.
cup strictly grows and is not modified inside the loop so the loop will end.
The node at current cup is either left alone or inserted into a position "behind" it,
so the set of childnodes at and below the cup is unchanged.
*/
	{
		fn = gt[cup];
		sn = gt[cup-1];
		s1 = fn.childNodes[ctsb].textContent;
		s2 = sn.childNodes[ctsb].textContent;
		if((s1 != s2) && ((s1 < s2) == lth))//if the latter one is less, but should be ascending...
		{//we have reason to enter the inner loop
			//fn is the one who will eventually be moved
			let scout = cup-2;//fn was already compared to the one just below it so step back 2 spots at least
			let rearguard = cup-1;
			let sign;
			while(scout >= 0)
			{
				sign = gt[scout].childNodes[ctsb].textContent;
				if((s1 == sign) || (s1 < sign) != lth)//found the proper place
				{
					break;
				}
				else//we have to go further to find the proper place
				{
					scout--;
					rearguard--;
				}
			}
			//fn's position should be between scout and rearguard. Scout might be -1 but rearguard will always be at least 0
			gt[rearguard].before(fn);
		}
	}
}
</script>
<style>
td,th
{
	white-space: nowrap;
}
span
{
	cursor: pointer;
}
select,input
{
	margin-top:1px;
	margin-bottom: 1px;
}
</style>
</head>
<body>
Site = <select id="selSite">
<option selected>lichess</option>
<option>lishogi</option>
</select><br>
<input type=text id="NofBotsToGet" value="200"> <input type=button value="Get this many bots" onClick=initialGet(this)>
<div id="logA">Log space</div>
<hr>
<div id="stts"></div>
<ul id="hdrs"></ul>
<div id="svar"></div>
<table border=1>
<thead>
<tr id="catRow"><th colspan=3></th><th colspan=2>Bullet</th><th colspan=2>Blitz</th><th colspan=2>Rapid</th><th colspan=2>Classical</th><th colspan=2>Correspondence</th></tr>
<tr id="nameRow"><th>id</th><th>username</th><th>#perfs</th>
<th>games</th><th>rating</th>
<th>games</th><th>rating</th>
<th>games</th><th>rating</th>
<th>games</th><th>rating</th>
<th>games</th><th>rating</th></tr>
<tr id="sortButtonRow"></tr></thead>
<tbody id="st"></tbody>
</table>
</body>
</html>